name: Build Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  # we assume that ci has already passed on the audit and tests, so we just build for release here

  # Note: This build step is mostly copied directly from main.yml :(
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Cache node modules
      uses: actions/cache@v1
      # TMP HACK https://github.com/actions/cache/issues/39
      if: runner.os != 'Windows'
      with:
        path: node_modules
        key: ${{ runner.OS }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.OS }}-
    - name: Cache node modules
      uses: actions/cache@v1
      # TMP HACK https://github.com/actions/cache/issues/39
      if: runner.os == 'Windows'
      with:
        path: node_modules
        key: ${{ runner.OS }}-${{ hashFiles('**\yarn.lock') }}
        restore-keys: |
          ${{ runner.OS }}-
    - name: yarn build
      run: |
        yarn install
        yarn build-ci-${{ runner.OS }}
    - name: upload asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip

  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: 'false'
        prerelease: 'false'

    - uses: actions/download-artifact@master
      with:
        name: linux
    - uses: actions/download-artifact@master
      with:
        name: Windows

    - name: Upload Linux
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux.zip
        asset_name: scanner-${{ github.ref }}-linux.zip
        asset_content_type: application/zip
    - name: Upload Windows
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Windows.zip
        asset_name: scanner-${{ github.ref }}-windows.zip
        asset_content_type: application/zip

