name: Build Dev

on: [push]

jobs:
  validate-dependencies:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: ${{ runner.OS }}-audit-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.OS }}-audit-
          ${{ runner.OS }}-
    - name: yarn validate:dependencies
      run: |
        yarn install
        yarn validate:dependencies

  # test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Use Node.js 12.x
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: '12.x'
  #   - name: Cache node modules
  #     uses: actions/cache@v1
  #     # TMP HACK https://github.com/actions/cache/issues/39
  #     if: runner.os != 'Windows'
  #     with:
  #       path: node_modules
  #       key: ${{ runner.OS }}-${{ hashFiles('**/yarn.lock') }}
  #       restore-keys: |
  #         ${{ runner.OS }}-
  #   - name: Cache node modules
  #     uses: actions/cache@v1
  #     # TMP HACK https://github.com/actions/cache/issues/39
  #     if: runner.os == 'Windows'
  #     with:
  #       path: node_modules
  #       key: ${{ runner.OS }}-${{ hashFiles('**\yarn.lock') }}
  #       restore-keys: |
  #         ${{ runner.OS }}-
  #   - name: yarn test
  #     run: |
  #       yarn install
  #       yarn test

  tag-release-on-master:
    runs-on: ubuntu-latest
    # needs: [validate-dependencies] # TODO + test
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: yarn release
      # if: github.ref == 'refs/heads/master' # TODO - uncomment this
      run: |
        git checkout "${GITHUB_REF:11}" # TODO - verify this is safe
        git remote set-url origin https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git
        git config --global user.email "info@superfly.tv"
        git config --global user.name "superflytvab"
        yarn install
        yarn release
        git push --follow-tags origin HEAD

  build:
    runs-on: ${{ matrix.os }}
    needs: [tag-release-on-master]
    strategy:
      matrix:
        os: [ubuntu-latest] #, windows-latest]
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Cache node modules
      uses: actions/cache@v1
      # TMP HACK https://github.com/actions/cache/issues/39
      if: runner.os != 'Windows'
      with:
        path: node_modules
        key: ${{ runner.OS }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.OS }}-
    - name: Cache node modules
      uses: actions/cache@v1
      # TMP HACK https://github.com/actions/cache/issues/39
      if: runner.os == 'Windows'
      with:
        path: node_modules
        key: ${{ runner.OS }}-${{ hashFiles('**\yarn.lock') }}
        restore-keys: |
          ${{ runner.OS }}-
    - name: yarn build
      run: |
        yarn install
        yarn build-ci-${{ runner.OS }}
    - uses: actions/upload-artifact@master
      with:
        name: ${{ runner.OS }}
        path: dist

  create-release:
    runs-on: ubuntu-latest
    needs: [tag-release-on-master, build]
    steps:
    - name: Parse version
      run: export NEW_VERSION=$(node -p "require('./package.json').version")
    - name: Test
      run: |
        env
        echo "$NEW_VERSION"

    # - name: Create Release
    #   id: create-release
    #   uses: actions/create-release@v1.0.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     draft: 'false'
    #     prerelease: 'false'

    # - uses: actions/download-artifact@master
    #   with:
    #     name: linux
    # # - uses: actions/download-artifact@master
    # #   with:
    # #     name: Windows

    # - name: Upload Linux
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./linux.zip
    #     asset_name: scanner-${{ github.ref }}-linux.zip
    #     asset_content_type: application/zip
    # # - name: Upload Windows
    # #   uses: actions/upload-release-asset@v1.0.1
    # #   env:
    # #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # #   with:
    # #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    # #     asset_path: ./Windows.zip
    # #     asset_name: scanner-${{ github.ref }}-windows.zip
    # #     asset_content_type: application/zip
